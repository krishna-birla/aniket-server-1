/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AuthorizationRequest;
import org.openapitools.model.AuthorizationResponse;
import org.openapitools.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-25T23:46:54.159924+05:30[Asia/Kolkata]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "authorization", description = "the authorization API")
public interface AuthorizationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /authorization/{messageId} : Removes funds from a user&#39;s account if sufficient funds are available.
     *
     * @param messageId Unique identifier for a message (required)
     * @param authorizationRequest An authorization request message that needs to be decisioned. (optional)
     * @return The result of an authorization (status code 201)
     *         or Server Error response (status code 200)
     */
    @Operation(
        operationId = "authorizationMessageIdPut",
        summary = "Removes funds from a user's account if sufficient funds are available.",
        responses = {
            @ApiResponse(responseCode = "201", description = "The result of an authorization", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthorizationResponse.class))
            }),
            @ApiResponse(responseCode = "default", description = "Server Error response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/authorization/{messageId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthorizationResponse> authorizationMessageIdPut(
        @Parameter(name = "messageId", description = "Unique identifier for a message", required = true, in = ParameterIn.PATH) @PathVariable("messageId") String messageId,
        @Parameter(name = "AuthorizationRequest", description = "An authorization request message that needs to be decisioned.") @Valid @RequestBody(required = false) AuthorizationRequest authorizationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : { \"amount\" : \"amount\", \"currency\" : \"currency\" }, \"messageId\" : \"messageId\", \"userId\" : \"userId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
