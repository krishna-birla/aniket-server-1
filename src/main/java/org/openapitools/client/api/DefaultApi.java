/*
 * Transaction Service
 * #### Notes  * Allows for the loading of funds to a user's account. * Handles the authorization of a transaction based on a user's balance. * Requires realtime synchronous calculation of balance on request. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthorizationRequest;
import org.openapitools.client.model.AuthorizationResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LoadRequest;
import org.openapitools.client.model.LoadResponse;
import org.openapitools.client.model.Ping;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authorizationMessageIdPut
     * @param messageId Unique identifier for a message (required)
     * @param authorizationRequest An authorization request message that needs to be decisioned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationMessageIdPutCall(String messageId, AuthorizationRequest authorizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizationRequest;

        // create path and map variables
        String localVarPath = "/authorization/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationMessageIdPutValidateBeforeCall(String messageId, AuthorizationRequest authorizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling authorizationMessageIdPut(Async)");
        }

        return authorizationMessageIdPutCall(messageId, authorizationRequest, _callback);

    }

    /**
     * Removes funds from a user&#39;s account if sufficient funds are available.
     * 
     * @param messageId Unique identifier for a message (required)
     * @param authorizationRequest An authorization request message that needs to be decisioned. (optional)
     * @return AuthorizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationResponse authorizationMessageIdPut(String messageId, AuthorizationRequest authorizationRequest) throws ApiException {
        ApiResponse<AuthorizationResponse> localVarResp = authorizationMessageIdPutWithHttpInfo(messageId, authorizationRequest);
        return localVarResp.getData();
    }

    /**
     * Removes funds from a user&#39;s account if sufficient funds are available.
     * 
     * @param messageId Unique identifier for a message (required)
     * @param authorizationRequest An authorization request message that needs to be decisioned. (optional)
     * @return ApiResponse&lt;AuthorizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationResponse> authorizationMessageIdPutWithHttpInfo(String messageId, AuthorizationRequest authorizationRequest) throws ApiException {
        okhttp3.Call localVarCall = authorizationMessageIdPutValidateBeforeCall(messageId, authorizationRequest, null);
        Type localVarReturnType = new TypeToken<AuthorizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes funds from a user&#39;s account if sufficient funds are available. (asynchronously)
     * 
     * @param messageId Unique identifier for a message (required)
     * @param authorizationRequest An authorization request message that needs to be decisioned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an authorization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationMessageIdPutAsync(String messageId, AuthorizationRequest authorizationRequest, final ApiCallback<AuthorizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationMessageIdPutValidateBeforeCall(messageId, authorizationRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadMessageIdPut
     * @param messageId Unique identifier for a message (required)
     * @param loadRequest An load request message that needs to be decisioned. This balance will be added to a user&#39;s balance. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadMessageIdPutCall(String messageId, LoadRequest loadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loadRequest;

        // create path and map variables
        String localVarPath = "/load/{messageId}"
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadMessageIdPutValidateBeforeCall(String messageId, LoadRequest loadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling loadMessageIdPut(Async)");
        }

        return loadMessageIdPutCall(messageId, loadRequest, _callback);

    }

    /**
     * Adds funds to a user&#39;s account.
     * 
     * @param messageId Unique identifier for a message (required)
     * @param loadRequest An load request message that needs to be decisioned. This balance will be added to a user&#39;s balance. (optional)
     * @return LoadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public LoadResponse loadMessageIdPut(String messageId, LoadRequest loadRequest) throws ApiException {
        ApiResponse<LoadResponse> localVarResp = loadMessageIdPutWithHttpInfo(messageId, loadRequest);
        return localVarResp.getData();
    }

    /**
     * Adds funds to a user&#39;s account.
     * 
     * @param messageId Unique identifier for a message (required)
     * @param loadRequest An load request message that needs to be decisioned. This balance will be added to a user&#39;s balance. (optional)
     * @return ApiResponse&lt;LoadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadResponse> loadMessageIdPutWithHttpInfo(String messageId, LoadRequest loadRequest) throws ApiException {
        okhttp3.Call localVarCall = loadMessageIdPutValidateBeforeCall(messageId, loadRequest, null);
        Type localVarReturnType = new TypeToken<LoadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds funds to a user&#39;s account. (asynchronously)
     * 
     * @param messageId Unique identifier for a message (required)
     * @param loadRequest An load request message that needs to be decisioned. This balance will be added to a user&#39;s balance. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The result of an load </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadMessageIdPutAsync(String messageId, LoadRequest loadRequest, final ApiCallback<LoadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadMessageIdPutValidateBeforeCall(messageId, loadRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pingGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ping successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pingGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return pingGetCall(_callback);

    }

    /**
     * Tests the availability of the service and returns the current server time.
     * 
     * @return Ping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ping successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public Ping pingGet() throws ApiException {
        ApiResponse<Ping> localVarResp = pingGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Tests the availability of the service and returns the current server time.
     * 
     * @return ApiResponse&lt;Ping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ping successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ping> pingGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pingGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Ping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tests the availability of the service and returns the current server time. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ping successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Server Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingGetAsync(final ApiCallback<Ping> _callback) throws ApiException {

        okhttp3.Call localVarCall = pingGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Ping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
